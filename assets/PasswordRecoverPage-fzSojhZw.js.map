{"version":3,"file":"PasswordRecoverPage-fzSojhZw.js","sources":["../../src/components/PasswordRecoverForm/PasswordRecoverForm.jsx","../../src/components/PasswordRecover/PasswordRecover.jsx","../../src/pages/PasswordRecoverPage/PasswordRecoverPage.jsx"],"sourcesContent":["import { useForm } from \"react-hook-form\";\nimport * as Yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport css from \"./PasswordRecoverForm.module.css\";\nimport { requestPasswordRecover } from \"../../services/authApi\";\nimport { useTranslation } from \"react-i18next\";\nimport { toast } from \"react-toastify\";\n\nconst UserEmailSchema = Yup.object().shape({\n  email: Yup.string()\n    .email(\"Must be a valid email!\")\n    .required(\"Email is required\"),\n});\n\nconst INITIAL_FORM_DATA = {\n  email: \"\",\n};\n\nconst PasswordRecoverForm = ({ onEmailSent }) => {\n  const { t } = useTranslation();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, touchedFields },\n  } = useForm({\n    resolver: yupResolver(UserEmailSchema),\n    defaultValues: INITIAL_FORM_DATA,\n  });\n\n  const onSubmit = async (data) => {\n    try {\n      await requestPasswordRecover(data.email);\n      onEmailSent();\n    } catch (error) {\n      console.log(error);\n      toast.error(\"There is no acount with this email!\");\n    }\n  };\n\n  return (\n    <div className={css.recoverFormWrap}>\n      <form className={css.recoverForm} onSubmit={handleSubmit(onSubmit)}>\n        <label className={css.label}>\n          {t(\"email\")}\n          <input\n            className={`${css.formInput} ${\n              errors.email && touchedFields.email\n                ? css.formInputError\n                : touchedFields.email\n                ? css.formInputValid\n                : \"\"\n            }`}\n            type=\"email\"\n            {...register(\"email\")}\n            autoComplete=\"email\"\n            placeholder={t(\"placeholder.email\")}\n          />\n          {errors.email && touchedFields.email ? (\n            <div className={css.errorMsg}>{errors.email.message}</div>\n          ) : null}\n        </label>\n        \n        <button className={css.submitBtn} type=\"submit\">\n          {t(\"submit\")}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default PasswordRecoverForm;\n","import { useState } from \"react\";\nimport Logo from \"../Logo/Logo\";\nimport PasswordRecoverForm from \"../PasswordRecoverForm/PasswordRecoverForm\";\nimport css from \"./PasswordRecover.module.css\";\nimport { useTranslation } from \"react-i18next\";\n\nconst PasswordRecover = () =>\n  {\n    const { t } = useTranslation();\n    const [emailSent, setEmailSent] = useState(false);\n\n    const handleEmailSent = () => {\n      setEmailSent(true);\n    };\n\n    return (\n      <div className={css.passwordRecoverWrap}>\n        <Logo />\n\n        <div className={css.infoContainer}>\n          {emailSent ? (\n            <div className={css.infoWrap}>\n              <p className={css.infoText}>{t(\"instructions_sent_email\")}</p>\n            </div>\n          ) : (\n            <div>\n              <div className={css.infoWrap}>\n                <h1 className={css.infoTitle}>{t(\"reset_password\")}</h1>\n                <p className={css.infoText}>{t(\"get_password_recovery\")}</p>\n              </div>\n              <PasswordRecoverForm onEmailSent={handleEmailSent} />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\nexport default PasswordRecover;\n","import PasswordRecover from \"../../components/PasswordRecover/PasswordRecover\";\n\nconst PasswordRecoverPage = () => {\n  return (\n    <>\n      <PasswordRecover />\n    </>\n  );\n};\n\nexport default PasswordRecoverPage;\n"],"names":["UserEmailSchema","Yup.object","Yup.string","INITIAL_FORM_DATA","PasswordRecoverForm","onEmailSent","t","useTranslation","register","handleSubmit","errors","touchedFields","useForm","yupResolver","onSubmit","data","requestPasswordRecover","error","toast","jsx","css","jsxs","PasswordRecover","emailSent","setEmailSent","useState","handleEmailSent","Logo","PasswordRecoverPage","Fragment"],"mappings":"keAQMA,EAAkBC,EAAW,EAAE,MAAM,CACzC,MAAOC,EAAW,EACf,MAAM,wBAAwB,EAC9B,SAAS,mBAAmB,CACjC,CAAC,EAEKC,EAAoB,CACxB,MAAO,EACT,EAEMC,EAAsB,CAAC,CAAE,YAAAC,KAAkB,CACzC,KAAA,CAAE,EAAAC,GAAMC,IACR,CACJ,SAAAC,EACA,aAAAC,EACA,UAAW,CAAE,OAAAC,EAAQ,cAAAC,CAAc,GACjCC,EAAQ,CACV,SAAUC,EAAYb,CAAe,EACrC,cAAeG,CAAA,CAChB,EAEKW,EAAW,MAAOC,GAAS,CAC3B,GAAA,CACI,MAAAC,EAAuBD,EAAK,KAAK,EAC3BV,UACLY,EAAO,CACd,QAAQ,IAAIA,CAAK,EACjBC,EAAM,MAAM,qCAAqC,CACnD,CAAA,EAGF,OACGC,EAAAA,IAAA,MAAA,CAAI,UAAWC,EAAI,gBAClB,SAAAC,EAAA,KAAC,OAAK,CAAA,UAAWD,EAAI,YAAa,SAAUX,EAAaK,CAAQ,EAC/D,SAAA,CAACO,EAAA,KAAA,QAAA,CAAM,UAAWD,EAAI,MACnB,SAAA,CAAAd,EAAE,OAAO,EACVa,EAAA,IAAC,QAAA,CACC,UAAW,GAAGC,EAAI,SAAS,IACzBV,EAAO,OAASC,EAAc,MAC1BS,EAAI,eACJT,EAAc,MACdS,EAAI,eACJ,EACN,GACA,KAAK,QACJ,GAAGZ,EAAS,OAAO,EACpB,aAAa,QACb,YAAaF,EAAE,mBAAmB,CAAA,CACpC,EACCI,EAAO,OAASC,EAAc,MAC5BQ,EAAA,IAAA,MAAA,CAAI,UAAWC,EAAI,SAAW,SAAAV,EAAO,MAAM,OAAQ,CAAA,EAClD,IAAA,EACN,EAEAS,EAAAA,IAAC,UAAO,UAAWC,EAAI,UAAW,KAAK,SACpC,SAAEd,EAAA,QAAQ,CACb,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,gNC9DMgB,EAAkB,IACtB,CACQ,KAAA,CAAE,EAAAhB,GAAMC,IACR,CAACgB,EAAWC,CAAY,EAAIC,WAAS,EAAK,EAE1CC,EAAkB,IAAM,CAC5BF,EAAa,EAAI,CAAA,EAGnB,OACGH,EAAAA,KAAA,MAAA,CAAI,UAAWD,EAAI,oBAClB,SAAA,CAAAD,EAAA,IAACQ,EAAK,EAAA,EAENR,EAAAA,IAAC,OAAI,UAAWC,EAAI,cACjB,SACCG,EAAAJ,EAAAA,IAAC,MAAI,CAAA,UAAWC,EAAI,SAClB,eAAC,IAAE,CAAA,UAAWA,EAAI,SAAW,SAAAd,EAAE,yBAAyB,CAAE,CAAA,CAAA,CAC5D,EAEAe,EAAA,KAAC,MACC,CAAA,SAAA,CAACA,EAAA,KAAA,MAAA,CAAI,UAAWD,EAAI,SAClB,SAAA,CAAAD,MAAC,MAAG,UAAWC,EAAI,UAAY,SAAAd,EAAE,gBAAgB,EAAE,QAClD,IAAE,CAAA,UAAWc,EAAI,SAAW,SAAAd,EAAE,uBAAuB,EAAE,CAAA,EAC1D,EACAa,EAAAA,IAACf,EAAoB,CAAA,YAAasB,CAAiB,CAAA,CAAA,CAAA,CACrD,CAEJ,CAAA,CACF,CAAA,CAAA,CAEJ,EClCIE,EAAsB,IAExBT,EAAA,IAAAU,EAAA,SAAA,CACE,SAACV,EAAA,IAAAG,EAAA,CAAA,CAAgB,CACnB,CAAA"}
{"version":3,"file":"ResetPasswordPage-DAyNQkUj.js","sources":["../../src/components/ResetPasswordForm/ResetPasswordForm.jsx","../../src/components/ResetPassword/ResetPassword.jsx","../../src/pages/ResetPasswordPage/ResetPasswordPage.jsx"],"sourcesContent":["import { useForm } from \"react-hook-form\";\nimport { useTranslation } from \"react-i18next\";\nimport { requestResetPassword } from \"../../services/authApi\";\nimport css from \"./ResetPasswordForm.module.css\";\nimport * as Yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\nconst UserPasswordSchema = Yup.object().shape({\n  password: Yup.string()\n    .min(6, \"Minimum 6 characters!\")\n    .max(50, \"Too Long!\")\n    .required(\"Password is required\"),\n  repeatPassword: Yup.string()\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n    .required(\"Repeat Password is required\"),\n});\n\nconst INITIAL_FORM_DATA = {\n  password: \"\",\n  repeatPassword: \"\",\n};\n\nconst ResetPasswordForm = ({ onPasswordReset }) => {\n  const { t } = useTranslation();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, touchedFields },\n  } = useForm({\n    resolver: yupResolver(UserPasswordSchema),\n    defaultValues: INITIAL_FORM_DATA,\n  });\n\n  const params = new URLSearchParams(location.search);\n  const token = params.get(\"token\");\n\n  const onSubmit = async (data) => {\n    try {\n      const response = await requestResetPassword({\n        token,\n        password: data.password,\n      });\n\n      if (response.status === 204) {\n        onPasswordReset();\n      } else {\n        alert(t(\"failed_reset_password\"));\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      alert(t(\"failed_reset_password\"));\n    }\n  };\n\n  return (\n    <div className={css.resetFormWrap}>\n      <form className={css.resetForm} onSubmit={handleSubmit(onSubmit)}>\n        <label className={css.label}>\n          {t(\"new_password\")}\n          <input\n            className={`${css.formInput} ${\n              errors.password && touchedFields.password\n                ? css.formInputError\n                : touchedFields.password\n                ? css.formInputValid\n                : \"\"\n            }`}\n            type={\"password\"}\n            {...register(\"password\")}\n            placeholder={t(\"placeholder.enter_new_password\")}\n          />\n\n          {errors.password && touchedFields.password ? (\n            <div className={css.errorMsg}>{errors.password.message}</div>\n          ) : null}\n        </label>\n        <label className={css.label}>\n          {t(\"confirm_password\")}\n          <input\n            className={`${css.formInput} ${\n              errors.repeatPassword && touchedFields.repeatPassword\n                ? css.formInputError\n                : touchedFields.repeatPassword\n                ? css.formInputValid\n                : \"\"\n            }`}\n            type={\"password\"}\n            {...register(\"repeatPassword\")}\n            placeholder={t(\"placeholder.confirm_new_password\")}\n          />\n          {errors.repeatPassword && touchedFields.repeatPassword ? (\n            <div className={css.errorMsg}>{errors.repeatPassword.message}</div>\n          ) : null}\n        </label>\n        <button className={css.submitBtn} type=\"submit\">\n          {t(\"reset_password\")}\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default ResetPasswordForm;\n","import { useState } from \"react\";\nimport Logo from \"../Logo/Logo\";\nimport ResetPasswordForm from \"../ResetPasswordForm/ResetPasswordForm\";\nimport css from \"./ResetPassword.module.css\";\nimport { Link } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ResetPassword = () => {\n  const { t } = useTranslation();\n  const [passwordReset, setPasswordReset] = useState();\n\n  const handlePasswordReset = () => {\n    setPasswordReset(true);\n  };\n\n  return (\n    <div className={css.resetPasswordWrap}>\n      <Logo />\n      <div className={css.infoContainer}>\n        {passwordReset ? (\n          <div>\n            <div className={css.infoWrap}>\n              <h1 className={css.infoTitle}>{t(\"password_changed\")}</h1>\n              <p className={css.text}>{t(\"log_new_password\")}</p>\n            </div>\n\n            <Link to=\"/signin\" className={css.signInBtn}>\n              {t(\"sign_in\")}\n            </Link>\n          </div>\n        ) : (\n          <div>\n            <div className={css.infoWrap}>\n              <h1 className={css.infoTitle}>{t(\"reset_your_password\")}</h1>\n            </div>\n            <ResetPasswordForm onPasswordReset={handlePasswordReset} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ResetPassword;\n","import ResetPassword from \"../../components/ResetPassword/ResetPassword\";\n\nconst ResetPasswordPage = () => {\n  return (\n    <>\n      <ResetPassword />\n    </>\n  );\n};\n\nexport default ResetPasswordPage;\n"],"names":["UserPasswordSchema","Yup.object","Yup.string","Yup.ref","INITIAL_FORM_DATA","ResetPasswordForm","onPasswordReset","t","useTranslation","register","handleSubmit","errors","touchedFields","useForm","yupResolver","token","onSubmit","data","requestResetPassword","error","jsx","css","jsxs","ResetPassword","passwordReset","setPasswordReset","useState","handlePasswordReset","Logo","Link","ResetPasswordPage","Fragment"],"mappings":"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"}